'use strict'; $('#popup-thanks').iziModal({ bodyOverflow: true, background: false }); $('#popup-user-order').iziModal({ background: false, bodyOverflow: true, width: '' }); const mediaQueryMobile = window.matchMedia('(max-width: 767px)'); const menuSwitcher = document.getElementById('menu-switch'); const mobileMenu = document.querySelector('.mobile-menu__wrapper'); const linkToMobileMenu = document.querySelector('.link-to-mobile-menu'); const productsBox = document.querySelector('.products__list'); const cardNumberField = document.getElementById('cc-number'); const cartList = document.querySelector('.cart-list'); const basketCounter = document.querySelector('.basket__counter'); const basketCounterMobile = document.querySelector('.basket__counter--mobile'); let cartItems = loadCartFromLocalStorage(); menuSwitcher.addEventListener('change', (e) => { if (e.target.checked) { bodyLock(); menuSwitcher.labels[0].title = 'close' } else if (!e.target.checked) { bodyUnlock(); menuSwitcher.labels[0].title = 'mobile menu' } }); linkToMobileMenu.addEventListener('click', (e) => { if (mediaQueryMobile.matches) { menuSwitcher.checked = true; bodyLock() } }); mobileMenu.addEventListener('click', (e) => { menuSwitcher.checked = false; bodyUnlock() }); function bodyLock() { const lockPaddingValue = window.innerWidth - document.querySelector('body').offsetWidth + "px"; document.body.style.paddingRight = lockPaddingValue; document.body.classList.add('lock-body') } function bodyUnlock() { document.body.style.paddingRight = '0px'; document.body.classList.remove('lock-body') } async function loadProducts() { let productsData; try { const response = await fetch('./data/products.json'); productsData = await response.json() } catch (error) { console.error('Error:', error) } productsData.forEach(({ imagePath, retinaImagePath, name, type, price, cardColor, id }) => { const productCard = `<li class="products__item"data-product-id="${id}"data-product-color="${cardColor}"><article class="product-card"style="background-color:${cardColor}"><h3 class="product-card__name">${name}</h3><span class="product-card__type">${type}</span><div class="product-card__image-wrapper"><img class="product-card__image"src="${imagePath}"srcset="${retinaImagePath} 2x"alt="${name}"width="295"height="251"loading="lazy"></div><div class="product-card__price button">${price} UAH /kg</div></article></li>`; productsBox.insertAdjacentHTML('beforeend', productCard) }) } productsBox.addEventListener('click', (e) => { const productItem = e.target.closest('.products__item'); if (productItem) { const productData = getProductData(productItem); cartItems.push(productData); saveCartToLocalStorage(cartItems); updateCartDisplay(); alert("The product has been added to your cart.") } }); loadProducts(); cardNumberField.addEventListener('input', function () { const value = this.value.replace(/\D/g, ''); const formattedValue = formatCardNumber(value); this.value = formattedValue }); function formatCardNumber(value) { const parts = []; for (let i = 0; i < value.length; i += 4) { parts.push(value.slice(i, i + 4)) } return parts.join(' ').trim() } $('#quick-order-form').on('submit', function (e) { e.preventDefault(); if (!this.checkValidity()) { this.reportValidity(); return } $('#popup-thanks').iziModal('open'); $('#popup-thanks').on('closed', function () { location.reload() }) }); $('.open-popup-user-order').click(function (e) { $('#popup-user-order').iziModal('open') }); $('#user-order-form').on('submit', function (e) { let orderString = "You ordered:\n"; e.preventDefault(); if (!this.checkValidity()) { this.reportValidity(); return } if (cartItems.length === 0) { alert('Cart is empty! Please add items to checkout..'); return } const checkboxes = document.querySelectorAll('input[name="products[]"]:checked'); const selectedCartItems = []; checkboxes.forEach(checkbox => { const productId = checkbox.value; const selectedItem = cartItems.find(item => String(item.id) === productId); if (selectedItem) { selectedCartItems.push(selectedItem) } }); selectedCartItems.forEach(item => { orderString += "- " + item.name + "\n" }); alert(orderString); localStorage.removeItem('cart'); cartItems = []; updateCartDisplay(); $('#popup-user-order').iziModal('close'); $('#popup-user-order').on('closed', function () { $('#popup-thanks').iziModal('open') }); bodyLock(); $('#popup-thanks').on('closed', function () { location.reload() }) }); document.addEventListener('DOMContentLoaded', function () { updateCartDisplay(); loadSpecialProducts() }); async function loadSpecialProducts() { let specialProductsData; if (localStorage.getItem('cart') === null || localStorage.getItem('cart') === '[]') { try { const response = await fetch('./data/special-offer.json'); specialProductsData = await response.json() } catch (error) { console.error('Error:', error); return } specialProductsData.forEach(product => { cartItems.push(product) }); saveCartToLocalStorage(cartItems) } updateCartDisplay() } function getProductData(productItem) { const productName = productItem.querySelector('.product-card__name').textContent; const productType = productItem.querySelector('.product-card__type').textContent; const productImage = productItem.querySelector('.product-card__image').src; const productImageRetina = productItem.querySelector('.product-card__image').getAttribute('srcset'); const productId = productItem.dataset.productId; console.log(productImageRetina); const productColorCard = productItem.dataset.productColor; return { id: productId, name: productName, type: productType, image: productImage, retina: productImageRetina, cardColor: productColorCard } } function saveCartToLocalStorage(cartItems) { localStorage.setItem('cart', JSON.stringify(cartItems)) } function loadCartFromLocalStorage() { const cartData = localStorage.getItem('cart'); try { return cartData ? JSON.parse(cartData) : [] } catch (error) { console.error("Error parsing JSON from localStorage:", error); return [] } } function createCartItemHTML(product) {
	const imageWidth = product.name === "Strawberry Basket" ? 173 : 229; return `<li class="cart-list__item user-purchase"style="background-color:${product.cardColor}"data-product-id="${product.id}"><label class="visually-hidden"for="product1">Product ${product.name}</label><input class="user-purchase__choice"type="checkbox"id="product-${product.id}"name="products[]"value="${product.id}"form="user-order-form"checked><h3 class="visually-hidden">User's procuct description</h3>
      <div class="user-purchase__header">
        <h4 class="user-purchase__name">${product.name}</h4>
        <span class="user-purchase__type">${product.type}</span>
      </div>
      <img class="user-purchase__image" src="${product.image}" srcset="${product.retina} 2x" alt="${product.name}" width="${imageWidth}" height="196">
    </li>
  `;
}

function updateCartDisplay() {
	const cartData = localStorage.getItem('cart');
	if (!cartData) {
		return;
	}

	cartList.innerHTML = '';
	cartItems.forEach(product => {
		cartList.insertAdjacentHTML('beforeend', createCartItemHTML(product));
	});

	basketCounter.textContent = cartItems.length;
	basketCounterMobile.textContent = cartItems.length;
}
// function remove products from user cart
cartList.addEventListener('click', (e) => {
	const productItem = e.target.closest('.cart-list__item');
	const isCheckbox = e.target.matches('input[type="checkbox"]'); if (productItem && !isCheckbox) { const productID = productItem.dataset.productId; const confirmation = confirm("Are you sure you want to remove this item from your cart?"); if (confirmation) { const indexToRemove = cartItems.findIndex(item => String(item.id) === productID); if (indexToRemove !== -1) { cartItems.splice(indexToRemove, 1); saveCartToLocalStorage(cartItems); updateCartDisplay() } } }
});